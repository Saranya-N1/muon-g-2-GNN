{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":6644065,"sourceType":"datasetVersion","datasetId":3835421},{"sourceId":7634905,"sourceType":"datasetVersion","datasetId":4448996},{"sourceId":7912396,"sourceType":"datasetVersion","datasetId":4648551},{"sourceId":8190689,"sourceType":"datasetVersion","datasetId":4850510},{"sourceId":8216547,"sourceType":"datasetVersion","datasetId":4870193},{"sourceId":8907847,"sourceType":"datasetVersion","datasetId":5355978}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"####  All the imports  ####\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport os\nimport logging\nimport time\n\nimport networkx as nx\nimport pickle\nfrom concurrent.futures import ThreadPoolExecutor\nfrom sklearn.neighbors import NearestNeighbors\n\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import TensorDataset, DataLoader\n\n# file_path = '/kaggle/input/recohit-dataset-100/RecoOutPileup_TimeMod_uniform_1_100recohitfile.tsv'\nDEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n# model_path = \"/kaggle/input/new-model-4dim/trained_full_model.pt\"\n\nimport networkx as nx\nfrom joblib import Parallel, delayed\n\nimport torch.optim as optim\n\nfrom torch.utils.data import random_split\n\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfolder_path = '/kaggle/working/embed_data'\nif not os.path.exists(folder_path):\n    os.makedirs(folder_path)\n    \nmodel_dir = \"/kaggle/working/model\"\nif not os.path.exists(model_dir):\n    os.makedirs(model_dir)\n\n# Save the figures in the \"plots\" folder\nplots_dir = \"/kaggle/working/plots\"\nif not os.path.exists(plots_dir):\n    os.makedirs(plots_dir)\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import minmax_scale\n\n# test_embedded_points\nimport os\n\n# Check if the directory already exists.\nif not os.path.exists(\"/kaggle/working/experiment_dir\"):\n\n    os.makedirs(\"/kaggle/working/experiment_dir\")\nexperiment_dir = \"/kaggle/working/experiment_dir\"\n\n# Create the \"embed_data\" folder if it doesn't exist\nfolder_path = '/kaggle/working/embed_data'\nif not os.path.exists(folder_path):\n    os.makedirs(folder_path)\n    \n# model_path = '/kaggle/input/model-new-4d/trained_full_model.pt'\n# if not os.path.exists(model_path):\n#     os.makedirs(model_path)\n    \n# Save the figures in the \"plots\" folder\nplots_dir = \"/kaggle/working/plots\"\nif not os.path.exists(plots_dir):\n    os.makedirs(plots_dir)\n    \nDEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nexperiment_dir = '/kaggle/working/'\n\nimport torch\n# from torch_geometric.nn import GCNConv\nimport networkx as nx\nimport numpy as np\nfrom sklearn.neighbors import KDTree\nimport time\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import minmax_scale\n\nimport os\nimport pickle\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nfrom sklearn.cluster import DBSCAN\nfrom collections import defaultdict\nimport time\n\nimport torch\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom concurrent.futures import ThreadPoolExecutor\nimport numpy as np\nimport networkx as nx\nfrom collections import defaultdict\nimport pickle","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-22T18:00:35.293316Z","iopub.execute_input":"2024-07-22T18:00:35.293836Z","iopub.status.idle":"2024-07-22T18:00:42.241230Z","shell.execute_reply.started":"2024-07-22T18:00:35.293806Z","shell.execute_reply":"2024-07-22T18:00:42.240176Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/100-dataset/RecoOutPileup_TimeMod_uniform_1_100recohitfile.tsv\n/kaggle/input/gnn-model-2/trained_model.pth\n/kaggle/input/new-model-4dim/evaluated_model.pt\n/kaggle/input/new-model-4dim/trained_full_model.pt\n/kaggle/input/modelupload/valid_epoch_model.pt\n/kaggle/input/modelupload/evaluated_model.pt\n/kaggle/input/modelupload/trained_model.pt\n/kaggle/input/modelupload/trained_full_model.pt\n/kaggle/input/new-10000-dataset/RecoOutPileup_TimeMod_uniform_1_10000_16666_ns_recohitfile.tsv\n/kaggle/input/model-gnn/gnn_model (1).pth\n/kaggle/input/100-dataset/RecoOutPileup_TimeMod_uniform_1_100recohitfile.tsv\n/kaggle/input/gnn-model-2/trained_model.pth\n/kaggle/input/new-model-4dim/evaluated_model.pt\n/kaggle/input/new-model-4dim/trained_full_model.pt\n/kaggle/input/modelupload/valid_epoch_model.pt\n/kaggle/input/modelupload/evaluated_model.pt\n/kaggle/input/modelupload/trained_model.pt\n/kaggle/input/modelupload/trained_full_model.pt\n/kaggle/input/new-10000-dataset/RecoOutPileup_TimeMod_uniform_1_10000_16666_ns_recohitfile.tsv\n/kaggle/input/model-gnn/gnn_model (1).pth\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install torch_geometric","metadata":{"execution":{"iopub.status.busy":"2024-07-22T18:00:42.242977Z","iopub.execute_input":"2024-07-22T18:00:42.243467Z","iopub.status.idle":"2024-07-22T18:00:57.702324Z","shell.execute_reply.started":"2024-07-22T18:00:42.243441Z","shell.execute_reply":"2024-07-22T18:00:57.701210Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Collecting torch_geometric\n  Downloading torch_geometric-2.5.3-py3-none-any.whl.metadata (64 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m64.2/64.2 kB\u001b[0m \u001b[31m736.3 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (4.66.1)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (1.26.4)\nRequirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (1.11.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (2024.2.0)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (3.1.2)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (3.9.1)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (2.31.0)\nRequirement already satisfied: pyparsing in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (3.1.1)\nRequirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (1.2.2)\nRequirement already satisfied: psutil>=5.8.0 in /opt/conda/lib/python3.10/site-packages (from torch_geometric) (5.9.3)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (23.2.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (6.0.4)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (1.9.3)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (1.4.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (1.3.1)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric) (4.0.3)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch_geometric) (2.1.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric) (2024.2.2)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->torch_geometric) (1.4.0)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->torch_geometric) (3.2.0)\nDownloading torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: torch_geometric\nSuccessfully installed torch_geometric-2.5.3\n","output_type":"stream"}]},{"cell_type":"code","source":"#####  File paths and model paths  ######\n\n# file_path1 = '/kaggle/input/new-10000-dataset/RecoOutPileup_TimeMod_uniform_1_10000_16666_ns_recohitfile.tsv'\nfile_path1 = '/kaggle/input/100-dataset/RecoOutPileup_TimeMod_uniform_1_100recohitfile.tsv'\ndata = pd.read_csv(file_path1, delimiter = '\\t')\n\nmodel_path = \"/kaggle/input/new-model-4dim/trained_full_model.pt\"\nmodel_gnn = '/kaggle/input/model-gnn/gnn_model (1).pth'","metadata":{"execution":{"iopub.status.busy":"2024-07-22T18:01:04.933614Z","iopub.execute_input":"2024-07-22T18:01:04.933990Z","iopub.status.idle":"2024-07-22T18:01:04.944593Z","shell.execute_reply.started":"2024-07-22T18:01:04.933961Z","shell.execute_reply":"2024-07-22T18:01:04.943685Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import time as ti\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport numpy as np\nfrom sklearn.cluster import DBSCAN\nimport os\nimport networkx as nx\nimport pickle\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom collections import defaultdict\n\n# Start timing the entire process\nstart_time = ti.time()\n\n# Timing dictionary to store times for each step\ntiming = {\n    'embedded_space_creation': 0,\n    'graph_edge_refinement': 0,\n    'edge_classification': 0\n}\n\n# Step 1: Embedded space creation\nstep_start_time = ti.time()\n\nchunk_size = 1000\ndata_chunks = pd.read_csv(file_path1, chunksize=chunk_size, delimiter='\\t')\n\n# Initialize an empty list to store chunks after processing\nprocessed_chunks = []\n\n# Process each chunk and assign unique HitID\nfor chunk in data_chunks:\n    if not chunk.empty:\n        # Generate unique HitID based on index\n        chunk['HitID'] = chunk.index + 1\n        # Append processed chunk to the list\n        processed_chunks.append(chunk)\n\ndata = pd.concat(processed_chunks, ignore_index=True)\ndata.to_csv(\"/kaggle/working/processed_data_with_hitid.csv\", index=False)\n\nupdated_graphs_dir = '/kaggle/working/updated_final_dbs'\ntrack_hits_file = '/kaggle/working/track_hits_dbs.csv'\nos.makedirs(updated_graphs_dir, exist_ok=True)\n\n# Define the MLP model\nclass MLP(nn.Module):\n    def __init__(self, nb_hidden, nb_layer, input_dim, mean, std, emb_dim=2):\n        super(MLP, self).__init__()\n        layers = [nn.Linear(input_dim, nb_hidden)]\n        ln = [nn.Linear(nb_hidden, nb_hidden) for _ in range(nb_layer-1)]\n        layers.extend(ln)\n        self.layers = nn.ModuleList(layers)\n        self.emb_layer = nn.Linear(nb_hidden, emb_dim)\n        self.act = nn.ReLU()\n        self.mean = torch.FloatTensor(mean).to(torch.float)\n        self.std = torch.FloatTensor(std).to(torch.float)\n\n    def forward(self, hits):\n        hits = self.normalize(hits)\n        for l in self.layers:\n            hits = l(hits)\n            hits = self.act(hits)\n        hits = self.emb_layer(hits)\n        return hits\n\n    def normalize(self, hits):\n        min_vals = torch.min(hits, dim=1, keepdim=True)[0]\n        max_vals = torch.max(hits, dim=1, keepdim=True)[0]\n        hits = (hits - min_vals) / (max_vals - min_vals + 1e-10)  # Avoid division by zero\n        return hits\n\ninput_dim = 4\nnb_hidden = 256\nnb_layer = 4\nemb_dim = 4\nmean = [0, 0, 0, 0]\nstd = [1, 1, 1, 1]\nDEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nnet = MLP(nb_hidden, nb_layer, input_dim, mean, std, emb_dim).to(DEVICE)\nnet.load_state_dict(torch.load(model_path, map_location=DEVICE))  # Change this to your actual model path\n\nraw_data = pd.read_csv('/kaggle/working/processed_data_with_hitid.csv')\nraw_tensor = torch.tensor(raw_data[['pos_x', 'pos_y', 'pos_z', 'time']].values, dtype=torch.float32).to(DEVICE)\ndataset = TensorDataset(raw_tensor)\nbatch_size = 256\nraw_loader = DataLoader(dataset, batch_size=batch_size, shuffle=False)\n\nprocessed_data = pd.read_csv('/kaggle/working/processed_data_with_hitid.csv')\n\nmuon_ids = processed_data['muonID'].values  # Extract muonIDs\nHit_ids = processed_data['HitID'].values  # Extract HitIDs\n\nnet.eval()\nembeddings = []\n\nwith torch.no_grad():\n    for batch_data in raw_loader:\n        batch_data = batch_data[0].to(DEVICE)\n        emb_points = net(batch_data)\n        embeddings.append(emb_points.cpu().numpy())\n\nall_embeddings = np.concatenate(embeddings, axis=0)\nnp.save('/kaggle/working/all_embeddings.npy', all_embeddings)\n\nnp.save('/kaggle/working/all_embeddings.npy', all_embeddings)\n\n\nnp.save('/kaggle/working/muon_ids.npy', muon_ids)\nnp.save('/kaggle/working/Hit_ids.npy', Hit_ids)\n\ntiming['embedded_space_creation'] = ti.time() - step_start_time\n\n# Step 2: Graph edge refinement\nstep_start_time = ti.time()\n\nepsilon = 0.0000025\nhit_ids = raw_data['HitID'].values\npositions = all_embeddings[:, :3]\n\ndef apply_dbscan(positions):\n    dbscan = DBSCAN(eps=epsilon, min_samples=3)\n    labels = dbscan.fit_predict(positions)\n    return labels\n\ndef process_clusters(labels):\n    clusters = defaultdict(list)\n    for i, label in enumerate(labels):\n        clusters[label].append(hit_ids[i])\n\n    cluster_graphs = []\n    for cluster_id, cluster_hits in clusters.items():\n        if len(cluster_hits) > 1:\n            G = nx.Graph()\n            for hit_id in cluster_hits:\n                G.add_node(hit_id, color='blue')\n            cluster_graphs.append(G)\n        else:\n            print(f\"Cluster {cluster_id} has only {len(cluster_hits)} node(s), not saving as a graph.\")\n    return cluster_graphs\n\nlabels = apply_dbscan(positions)\ncluster_graphs = process_clusters(labels)\n\ndef save_graph_with_scores(graph, updated_graphs_dir, edge_scores, graph_name):\n    graph_file = f'{graph_name}_with_scores.pkl'\n    for (u, v), score in edge_scores.items():\n        if graph.has_edge(u, v):\n            graph[u][v]['score'] = score\n    with open(os.path.join(updated_graphs_dir, graph_file), 'wb') as f:\n        pickle.dump(graph, f)\n\ntiming['graph_edge_refinement'] = ti.time() - step_start_time\n\n# Step 3: Edge classification\nstep_start_time = ti.time()\n\nclass EdgeNetwork(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        super(EdgeNetwork, self).__init__()\n        self.edge_mlp = nn.Sequential(\n            nn.Linear(2 * input_dim, hidden_dim),\n            nn.Tanh(),\n            nn.Linear(hidden_dim, output_dim)\n        )\n\n    def forward(self, hi, hj):\n        concatenated = torch.cat((hi, hj), dim=-1)\n        return self.edge_mlp(concatenated)\n\nclass NodeNetwork(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        super(NodeNetwork, self).__init__()\n        self.node_mlp = nn.Sequential(\n            nn.Linear(3 * input_dim, hidden_dim),\n            nn.Tanh(),\n            nn.Linear(hidden_dim, output_dim)\n        )\n\n    def forward(self, h_in, s_in, h_out):\n        return self.node_mlp(torch.cat((s_in * h_in, s_in * h_out, h_in), dim=-1)) + h_in\n\nclass GNN(nn.Module):\n    def __init__(self, edge_in_dim, edge_hidden_dim, edge_out_dim,\n                 node_in_dim, node_hidden_dim, node_out_dim, n_iter):\n        super(GNN, self).__init__()\n        self.edge_network = EdgeNetwork(edge_in_dim, edge_hidden_dim, edge_out_dim)\n        self.node_network = NodeNetwork(node_in_dim, node_hidden_dim, node_out_dim)\n        self.n_iter = n_iter\n\n    def forward(self, node_features, edge_indices):\n        for _ in range(self.n_iter):\n            new_node_features = {}\n            for node_id, neighbors in edge_indices.items():\n                h_in = node_features[node_id]\n                s_in = []\n                for neighbor_id in neighbors:\n                    h_out = node_features[neighbor_id]\n                    s_in.append(self.edge_network(h_in, h_out))\n                if s_in:\n                    s_in = torch.stack(s_in, dim=0)\n                    new_node_features[node_id] = self.node_network(h_in, s_in.mean(dim=0), h_out)\n                else:\n                    new_node_features[node_id] = h_in\n            node_features = new_node_features\n        return node_features\n\nmodel = GNN(edge_in_dim=4, edge_hidden_dim=64, edge_out_dim=1, node_in_dim=4, node_hidden_dim=64, node_out_dim=4, n_iter=2).to(DEVICE)\nmodel.load_state_dict(torch.load(model_gnn))  # Change this to your actual model path\nmodel.eval()\n\nnode_features = {row['HitID']: torch.tensor([row['pos_x'], row['pos_y'], row['pos_z'], row['time']], dtype=torch.float32).to(DEVICE) for index, row in raw_data.iterrows()}\nall_edge_scores = {}\ntrack_hits = []\n\nfor i, G in enumerate(cluster_graphs):\n    edge_indices = {node: list(G.neighbors(node)) for node in G.nodes}\n    outputs = model(node_features, edge_indices)\n    edge_scores = {}\n    for node_id, neighbors in edge_indices.items():\n        h_in = outputs[node_id]\n        for neighbor_id in neighbors:\n            h_out = outputs[neighbor_id]\n            edge_score = model.edge_network(h_in, h_out)\n            edge_score = torch.sigmoid(edge_score).item()\n            edge_scores[(node_id, neighbor_id)] = edge_score\n    all_edge_scores[i] = edge_scores\n    save_graph_with_scores(G, updated_graphs_dir, edge_scores, f'graph_{i + 1}')\n    track_hits.append({'track_number': i + 1, 'points': list(G.nodes)})\n\nprint(f'Updated graphs with edge scores saved to {updated_graphs_dir}')\n\n# Save track hits to CSV\ntrack_hits_df = pd.DataFrame(track_hits)\ntrack_hits_df.to_csv(track_hits_file, index=False)\nprint(f'Track hits saved to {track_hits_file}')\n\ntiming['edge_classification'] = ti.time() - step_start_time\n\n# Save the results as needed\n\n# Print the timing results\nfor step, duration in timing.items():\n    print(f\"{step}: {duration:.2f} seconds\")\n\nplt.figure(figsize=(10, 6))\nplt.bar(timing.keys(), timing.values())\nplt.xlabel('Steps')\nplt.ylabel('Time (seconds)')\nplt.title('Time taken for each step')\nplt.show()\n\nend_time = ti.time()\nexecution_time = end_time - start_time\nprint(f\"Total execution time: {execution_time:.2f} seconds\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T11:27:53.392620Z","iopub.execute_input":"2024-07-22T11:27:53.393023Z","iopub.status.idle":"2024-07-22T11:27:54.225521Z","shell.execute_reply.started":"2024-07-22T11:27:53.392990Z","shell.execute_reply":"2024-07-22T11:27:54.224434Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Updated graphs with edge scores saved to /kaggle/working/updated_final_dbs\nTrack hits saved to /kaggle/working/track_hits_dbs.csv\nembedded_space_creation: 0.08 seconds\ngraph_edge_refinement: 0.02 seconds\nedge_classification: 0.45 seconds\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA04AAAIjCAYAAAA0vUuxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABSPUlEQVR4nO3dd3gU5f7+8XsTSDYhhZ4ECIn0gPRQQkeCQdEDCFI9JAhYEPBrDgrIoaOAFFFAQY6IIgpHwUaVYhQQ6UUFAkSKSm8JNZHk+f3Bjz0sCUwSAhvh/bquvXSfeWbms8Pu7NyZmWdtxhgjAAAAAMBNubm6AAAAAADI7QhOAAAAAGCB4AQAAAAAFghOAAAAAGCB4AQAAAAAFghOAAAAAGCB4AQAAAAAFghOAAAAAGCB4AQAAAAAFghOAJBLxMTEKDQ01NVl5KgmTZrowQcfdHUZDkuXLlW1atVkt9tls9l09uxZV5eU42w2m3r37u3qMgDgnkNwAoA7yGazZeoRFxfn6lLT2blzp4YNG6YDBw64upQccerUKbVv315eXl6aOnWqZs+erXz58rm6rL+dH3/8UcOGDbsnQycA3EoeVxcAAPey2bNnOz3/6KOPtHz58nTtYWFhmjFjhtLS0u5mebe0c+dODR8+XE2aNLknzoRt3LhR586d08iRIxUZGenqcv62fvzxRw0fPlwxMTHKnz+/q8sBgLuG4AQAd9BTTz3l9Pynn37S8uXL07Xjzjt+/Lgk5ejB/oULFzhrBQD3CS7VA4Bc4sZ7nA4cOCCbzabx48dr6tSpKlWqlLy9vfXwww/r999/lzFGI0eOVIkSJeTl5aVWrVrp9OnT6Za7ZMkSNWzYUPny5ZOvr69atmypX3/99Za1zJo1S08++aQkqWnTpukuKfzqq6/UsmVLFStWTJ6enipdurRGjhyp1NRUy9f57bffytvbW506ddKVK1ckSbt371a7du1UsGBB2e12hYeH6+uvv05Xk81m09q1axUbG6siRYooX758atOmjU6cOHHLdTZp0kTR0dGSpFq1aslmsykmJsYx/bPPPlPNmjXl5eWlwoUL66mnntKff/7ptIyYmBj5+PgoISFBjz76qHx9fdWlS5dbrvfPP//U008/rYCAAHl6eqpSpUqaOXOmU5+UlBQNGTJENWvWlL+/v/Lly6eGDRvqu+++S7e8tLQ0vfXWW6pcubLsdruKFCmiFi1aaNOmTen6fvnll3rwwQcd6126dOkta71m8uTJqlSpkry9vVWgQAGFh4frk08+kSQNGzZML7/8siTpgQcecLwvrr+c8+OPP3Zsy4IFC6pjx476/fffndZx7d63zZs3q169evLy8tIDDzygadOmZapGAHAFzjgBQC43Z84cpaSkqE+fPjp9+rTeeOMNtW/fXg899JDi4uLUv39/7du3T5MnT1a/fv2cDsxnz56t6OhoRUVFaezYsbp48aLeffddNWjQQFu3br3pJXiNGjVS37599fbbb+vVV19VWFiYJDn+O2vWLPn4+Cg2NlY+Pj5atWqVhgwZoqSkJI0bN+6mr2XhwoVq166dOnTooJkzZ8rd3V2//vqr6tevr+LFi2vAgAHKly+f/vvf/6p169aaP3++2rRp47SMPn36qECBAho6dKgOHDigSZMmqXfv3po3b95N1zto0CCVL19e7733nkaMGKEHHnhApUuXdryWbt26qVatWho9erSOHTumt956S2vXrtXWrVudzlBduXJFUVFRatCggcaPHy9vb++brvPYsWOqW7euY7CGIkWKaMmSJerevbuSkpL0f//3f5KkpKQk/ec//1GnTp3Us2dPnTt3Tu+//76ioqK0YcMGVatWzbHM7t27a9asWXrkkUfUo0cPXblyRatXr9ZPP/2k8PBwR781a9ZowYIF6tWrl3x9ffX222+rbdu2OnTokAoVKnTTmmfMmKG+ffuqXbt2evHFF3X58mXt2LFD69evV+fOnfXEE09oz549+vTTT/Xmm2+qcOHCkqQiRYpIkl577TUNHjxY7du3V48ePXTixAlNnjxZjRo1Srctz5w5o0cffVTt27dXp06d9N///lfPP/+8PDw89PTTT9+0RgBwGQMAuGteeOEFc7Ndb3R0tAkJCXE8379/v5FkihQpYs6ePetoHzhwoJFkqlatav766y9He6dOnYyHh4e5fPmyMcaYc+fOmfz585uePXs6refo0aPG398/XfuNPvvsMyPJfPfdd+mmXbx4MV3bs88+a7y9vR3rN8aYxo0bm0qVKhljjJk/f77Jmzev6dmzp0lNTXX0adasmalcubLTfGlpaaZevXqmbNmyjrYPPvjASDKRkZEmLS3N0f7SSy8Zd3d3p22UkWvzb9y40dGWkpJiihYtah588EFz6dIlR/vChQuNJDNkyBBHW3R0tJFkBgwYcMv1XNO9e3cTFBRkTp486dTesWNH4+/v79iGV65cMcnJyU59zpw5YwICAszTTz/taFu1apWRZPr27ZtuXddvD0nGw8PD7Nu3z9G2fft2I8lMnjz5ljW3atXK8e91M+PGjTOSzP79+53aDxw4YNzd3c1rr73m1P7zzz+bPHnyOLU3btzYSDITJkxwtCUnJ5tq1aqZokWLmpSUlFvWAACuwKV6AJDLPfnkk/L393c8r1OnjqSr90/lyZPHqT0lJcVxidny5ct19uxZderUSSdPnnQ83N3dVadOnQwvBcssLy8vx/+fO3dOJ0+eVMOGDXXx4kXt3r07Xf9PP/1UHTp00LPPPqvp06fLze3q18/p06e1atUqtW/f3rGckydP6tSpU4qKitLevXvTXTL3zDPPyGazOZ43bNhQqampOnjwYJZfx6ZNm3T8+HH16tVLdrvd0d6yZUtVqFBBixYtSjfP888/b7lcY4zmz5+vxx9/XMYYp+0fFRWlxMREbdmyRZLk7u4uDw8PSVcvxTt9+rSuXLmi8PBwRx9Jmj9/vmw2m4YOHZpufddvD0mKjIx0nFGTpCpVqsjPz0+//fbbLevOnz+//vjjD23cuNHyNd5owYIFSktLU/v27Z1eb2BgoMqWLZvu/ZYnTx49++yzjuceHh569tlndfz4cW3evDnL6weAO41L9QAglytZsqTT82shKjg4OMP2M2fOSJL27t0rSXrooYcyXK6fn1+2a/r111/173//W6tWrVJSUpLTtMTERKfn+/fv11NPPaUnn3xSkydPdpq2b98+GWM0ePBgDR48OMN1HT9+XMWLF3c8v3F7FChQQNL/XndWXAtb5cuXTzetQoUKWrNmjVNbnjx5VKJECcvlnjhxQmfPntV7772n9957L8M+1warkKQPP/xQEyZM0O7du/XXX3852h944AHH/yckJKhYsWIqWLCg5fpv3EbS1e1ktY369++vFStWqHbt2ipTpowefvhhde7cWfXr17dc5969e2WMUdmyZTOcnjdvXqfnxYoVSzewRrly5SRdvb+vbt26lusEgLuJ4AQAuZy7u3uW2o0xkuQY2nz27NkKDAxM1+/6s1VZcfbsWTVu3Fh+fn4aMWKESpcuLbvdri1btqh///7phlQPCgpSUFCQFi9erE2bNjnd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MqdLaSTpxRdfVExMjMLDw1W/fn3NmTNHv/76q9NlhMOHD1ffvn3l7++vFi1aKDk5WZs2bdKZM2cUGxurzp07a9CgQerZs6cGDhyoAwcOZPpskSQNGTJENWvWVKVKlZScnKyFCxcqLCzMqc/UqVNVtmxZhYWF6c0339SZM2f09NNPS5LKli2rjz76SMuWLdMDDzyg2bNna+PGjU5/mRo2bJiee+45FS1aVI888ojOnTuntWvXqk+fPoqMjFRERIRat26tN954Q+XKldPhw4e1aNEitWnTJsPLqa43dOhQNWvWTKVLl1bHjh115coVLV68WP3797/pPP3791fdunXVu3dv9ejRQ/ny5dPOnTu1fPlyTZkyRSVLlpSHh4cmT56s5557Tr/88otGjhzptIyQkBDZbDYtXLhQjz76qLy8vNKdEShbtqxatWqlnj17avr06fL19dWAAQNUvHhxtWrVKlP/Psg6X19fRUdH6+WXX1bBggVVtGhRDR06VG5ubk6XcdyobNmyOnTokObOnatatWpp0aJF+uKLL9L1s9vtio6O1vjx45WUlKS+ffuqffv2OTI0bk7tW/r06aOePXsqPDxc9erV07x587Rjx44s7Vuy404sMyNDhgzRY489ppIlS6pdu3Zyc3PT9u3b9csvv2jUqFEuXW5m9g3IPayOI5577jlNmDBBL7/8snr06KHNmzdr1qxZTsvo06ePGjVqpIkTJ+rxxx/XqlWrtGTJEqf9ze28txo3bqxGjRqpbdu2mjhxosqUKaPdu3fLZrOpRYsW6fqXLVtWCxYs0OOPPy6bzabBgwc7nVVZuHChfvvtNzVq1EgFChTQ4sWLlZaWpvLly2v9+vVauXKlHn74YRUtWlTr16/XiRMn0h0XZFZoaKiio6P19NNP6+2331bVqlV18OBBHT9+XO3bt8/UMURoaKiWLVum+Ph4FSpUKMNLf3v16qVJkyapT58+6t27t+Lj4zV06FDFxsbKzY2Bsu8KF99jhUxKS0szkyZNMuXLlzd58+Y1RYoUMVFRUeb777/P8CbdjG6iHDp0qNNN040bNza9evUyzz33nPHz8zMFChQwr776qtNNh9dGggkNDTV58+Y1QUFBpk2bNmbHjh2OPu+//74pUaKE8fLyMo8//rgZP358unW/9tprpnDhwsbHx8dER0ebV155xakWY4yZM2eOqVatmvHw8DAFChQwjRo1MgsWLHBMX7dunalatarx8PAw1apVc4zqlJnBIUaOHGnCwsKMl5eXKViwoGnVqpX57bffjDH/u/nyk08+MbVr1zYeHh6mYsWKZtWqVY75L1++bGJiYoy/v7/Jnz+/ef75582AAQPSvYZp06Y5/o2CgoJMnz59HNOSkpJMnz59TLFixUzevHlNcHCw6dKlizl06JBl/cZcvdH12vYpXLiweeKJJxzTQkJCnEbwu2bDhg2mefPmxsfHx+TLl89UqVLFvPbaa47pn3zyiQkNDTWenp4mIiLCfP311+m26YgRI0xgYKCx2WwmOjraGJN+NKHTp0+bf/7zn8bf3994eXmZqKgox+hoxmT8fvziiy8Mu6Dbk5SUZDp37my8vb1NYGCgmThxoqldu7YZMGCAMebm74uXX37ZFCpUyPj4+JgOHTqYN9980+nf59q+4p133jHFihUzdrvdtGvXzpw+fdrRJ6MbmV988UXTuHHjTNWeU/uWESNGOPYtTz/9tOnbt6+pW7euUx+rfcvN3HhjdlaWmdnBIa7fb2/dutVIMvv373e0LV261NSrV894eXkZPz8/U7t2baeRCyWZL7744pY1Z7SurC7XGGP8/f3NBx984Hie0b4BudetjiOMMeabb74xZcqUMZ6enqZhw4Zm5syZ6d437733nilevLjx8vIyrVu3NqNGjTKBgYFO67F6b93KqVOnTLdu3UyhQoWM3W43Dz74oFm4cKExJv33yP79+03Tpk2Nl5eXCQ4ONlOmTHH6blq9erVp3LixKVCggPHy8jJVqlRxjGK3c+dOExUVZYoUKWI8PT1NuXLlHINKGJP1wSGMMebSpUvmpZdeMkFBQcbDw8OUKVPGzJw50xiTuWOI48ePO76vJZnvvvsuw89zXFycqVWrlvHw8DCBgYGmf//+5q+//rppXcYY06pVKz6jOcRmDDcZ4P524MABPfDAA9q6dWuWb9QEcpMLFy6oePHimjBhgrp3757t5QwbNkxffvml02+H/F00b95cgYGBmj17tqtLAe55PXv21O7du7V69WpXlwLcFVyqBwB/U1u3btXu3btVu3ZtJSYmasSIEZJ031wiefHiRU2bNk1RUVFyd3fXp59+qhUrVmj58uWuLg24J40fP17NmzdXvnz5tGTJEn344YeZ/kFp4F7ABZG4Jzz33HPy8fHJ8HHjUOi5UaVKlW5a//XDiQM3Gj9+vKpWrer41fvVq1ercOHCLq1p9erVN30/5+R9MDabTYsXL1ajRo1Us2ZNffPNN5o/f36GN2dn5PXXX79pjY888kiO1QncKzZs2KDmzZurcuXKmjZtmt5++2316NEjU/POmTPnpp+3SpUq3eHKgZzBpXq4Jxw/flxJSUkZTvPz81PRokXvckVZc/DgQf31118ZTgsICJCvr+9drgjIvkuXLunPP/+86fScHiUuu06fPq3Tp09nOM3LyyvdsM0Asu/cuXM6duxYhtPy5s17WwNdAXcLwQkAAAAALHCpHgAAAABYIDgBAAAAgAWCEwAAAABYIDgBAAAAgAWCEwAAAABYIDgBAP52Tpw4oeeff14lS5aUp6enAgMDFRUVpbVr10q6+htPX375pWuLBADcU/K4ugAAALKqbdu2SklJ0YcffqhSpUrp2LFjWrlypU6dOuXq0gAA9yjOOAEA/lbOnj2r1atXa+zYsWratKlCQkJUu3ZtDRw4UP/4xz8UGhoqSWrTpo1sNpvjuSR99dVXqlGjhux2u0qVKqXhw4frypUrjuk2m03vvvuuHnnkEXl5ealUqVL6/PPPHdNTUlLUu3dvBQUFyW63KyQkRKNHj75bLx0A4EIEJwDA34qPj498fHz05ZdfKjk5Od30jRs3SpI++OADHTlyxPF89erV6tq1q1588UXt3LlT06dP16xZs/Taa685zT948GC1bdtW27dvV5cuXdSxY0ft2rVLkvT222/r66+/1n//+1/Fx8drzpw5TsEMAHDvshljjKuLAAAgK+bPn6+ePXvq0qVLqlGjhho3bqyOHTuqSpUqkq6eOfriiy/UunVrxzyRkZFq1qyZBg4c6Gj7+OOP9corr+jw4cOO+Z577jm9++67jj5169ZVjRo19M4776hv37769ddftWLFCtlstrvzYgEAuQJnnAAAfztt27bV4cOH9fXXX6tFixaKi4tTjRo1NGvWrJvOs337do0YMcJxxsrHx0c9e/bUkSNHdPHiRUe/iIgIp/kiIiIcZ5xiYmK0bds2lS9fXn379tW33357R14fACD3ITgBAP6W7Ha7mjdvrsGDB+vHH39UTEyMhg4detP+58+f1/Dhw7Vt2zbH4+eff9bevXtlt9sztc4aNWpo//79GjlypC5duqT27durXbt2OfWSAAC5GMEJAHBPqFixoi5cuCBJyps3r1JTU52m16hRQ/Hx8SpTpky6h5vb/74Of/rpJ6f5fvrpJ4WFhTme+/n5qUOHDpoxY4bmzZun+fPn6/Tp03fwlQEAcgOGIwcA/K2cOnVKTz75pJ5++mlVqVJFvr6+2rRpk9544w21atVKkhQaGqqVK1eqfv368vT0VIECBTRkyBA99thjKlmypNq1ayc3Nzdt375dv/zyi0aNGuVY/meffabw8HA1aNBAc+bM0YYNG/T+++9LkiZOnKigoCBVr15dbm5u+uyzzxQYGKj8+fO7YlMAAO4ighMA4G/Fx8dHderU0ZtvvqmEhAT99ddfCg4OVs+ePfXqq69KkiZMmKDY2FjNmDFDxYsX14EDBxQVFaWFCxdqxIgRGjt2rPLmzasKFSqoR48eTssfPny45s6dq169eikoKEiffvqpKlasKEny9fXVG2+8ob1798rd3V21atXS4sWLnc5YAQDuTYyqBwDA/5fRaHwAAEjc4wQAAAAAlghOAAAAAGCBe5wAAPj/uHodAHAznHECAAAAAAsEJwAAAACwQHACAAAAAAsEJwAAAACwQHACAAAAAAsEJwAAAACwQHACAAAAAAsEJwAAAACw8P8AbH8wRi3lOC4AAAAASUVORK5CYII="},"metadata":{}},{"name":"stdout","text":"Total execution time: 0.79 seconds\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}